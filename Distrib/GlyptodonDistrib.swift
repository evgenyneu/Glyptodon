//
// Glyptodon
//
// A UI widget for displaying 'no results' message in iOS
//
// https://github.com/marketplacer/glyptodon
//
// This file was automatically generated by combining multiple Swift source files.
//


// ----------------------------
//
// Glyptodon.swift
//
// ----------------------------


import UIKit

/**

Glyptodon object is for showing and hiding of the message view.

The instance is created automatically in the `glyptodon` property of any UIView instance.
It is not expected to be instantiated manually anywhere except in unit tests.

For example:

    let view = UIView()
    view.glyptodon.show("No messages")

*/
final public class Glyptodon {
  fileprivate weak var superview: UIView!
  var didFinishShowAnimation: (()->())? // Called after the show animation is finished. Used in unit tests
  var didFinishHideAnimation: (()->())? // Called after hide animation is finished. Used in unit tests
    
  init(superview: UIView) {
    self.superview = superview
  }
  
  /// Defines styles for the view.
  public var style = GlyptodonStyle()
  
  /**
  
  Shows the message view with a title.
  
  - parameter title: The text message to be shown.
  
  */
  public func show(_ title: String, withAnimation: Bool = true) {
    let currentExistingViews = existingViews
    
    let view = GlyptodonView(style: style)
    
    view.showInSuperview(superview, title: title, withAnimation: withAnimation,
      didFinishAnimation: { [weak self] in
        
        // Remove previously shown views after this view finished animating
        Glyptodon.removeViews(currentExistingViews)
        
        self?.didFinishShowAnimation?()
      }
    )
  }
  
  /**
  
  Shows the message view with a title and a button.
  
  - parameter title: The text message to be shown.
  - parameter withButton: The title for the button
  - parameter didTap: A closure that will be called when the button is tapped.
  
  */
  public func show(_ title: String, withButton button: String, withAnimation: Bool = true,
    didTap: @escaping ()->()) {
      
    let currentExistingViews = existingViews
    
    let view = GlyptodonView(style: style)
    
    view.showInSuperview(superview, title: title, withButton: button,
      withAnimation: withAnimation, didTapButton: didTap,
      didFinishAnimation: { [weak self] in
        
        // Remove previously shown views after this view finished animating
        Glyptodon.removeViews(currentExistingViews)
        
        self?.didFinishShowAnimation?()
      }
    )
  }
  
  /// Hide the message window if it's currently open.
  public func hide(withAnimation: Bool = true) {
    let viewToHide = existingViews
    
    for (index, view) in viewToHide.enumerated() {
      let topView = index == viewToHide.count - 1
      let useAnimation = topView ? withAnimation : false // Animate only top view
      
      view.hide(withAnimation: useAnimation) { [weak self] in
        if topView {
          self?.didFinishHideAnimation?()
        }
      }
    }
  }
  
  /// Check if the message view is currently visible.
  public var visible: Bool {
    get {
      if let glyptodonView = glyptodonView {
        return !glyptodonView.beingHidden
      }
      
      return false
    }
  }
  
  /// Returns the currently displayed title label.
  public var titleLabel: UILabel? {
    get {
      return glyptodonView?.subviews.filter { $0 is UILabel }.map { $0 as! UILabel }.first
    }
  }
  
  /// Returns the button.
  public var button: UIButton? {
    get {
      return glyptodonView?.subviews.filter { $0 is UIButton }.map { $0 as! UIButton }.first
    }
  }
  
  fileprivate var glyptodonView: GlyptodonView? {
    get {
      return existingViews.last
    }
  }
  
  fileprivate var existingViews: [GlyptodonView] {
    return superview.subviews.filter { $0 is GlyptodonView }.map { $0 as! GlyptodonView }
  }
  
  fileprivate class func removeViews(_ views: [UIView]) {
    for view in views {
      view.removeFromSuperview()
    }
  }
}


// ----------------------------
//
// GlyptodonView.swift
//
// ----------------------------

import UIKit

class GlyptodonView: UIView {
  var style: GlyptodonStyle
  
  /// Shows if the view is being hidden
  var beingHidden = false
  
  /// Button tap closure supplied by the user
  var didTapButtonHandler: (()->())?
  
  convenience init(style: GlyptodonStyle) {
    self.init(frame: CGRect())
    
    self.style = style
  }
  
  override init(frame: CGRect) {
    style = GlyptodonStyle()
    
    super.init(frame: frame)
  }
  
  required init(coder aDecoder: NSCoder) {
    fatalError("init(coder:) has not been implemented")
  }
  
  func showInSuperview(_ superview: UIView, title: String, withAnimation: Bool,
    didFinishAnimation: @escaping ()->()) {
      
    superview.addSubview(self)
    addLayoutConstraints()
    createTitle(title)
    applyStyle()
    
    if withAnimation {
      animateIn() { didFinishAnimation() }
    } else {
      didFinishAnimation()
    }
  }
  
  func showInSuperview(_ superview: UIView, title: String,
    withButton buttonTitle: String, withAnimation: Bool, didTapButton: @escaping ()->(),
    didFinishAnimation: @escaping ()->()) {
    
    showInSuperview(superview, title: title, withAnimation: withAnimation,
      didFinishAnimation: didFinishAnimation)
      
    self.didTapButtonHandler = didTapButton
    createButton(buttonTitle)
  }
  
  func hide(withAnimation: Bool, didFinishAnimation: @escaping ()->()) {
    if beingHidden {
      didFinishAnimation()
      return
    }
    
    beingHidden = true
    
    if withAnimation {
      animateOut() { [weak self] in
        self?.removeFromSuperview()
        didFinishAnimation()
      }
    } else {
      removeFromSuperview()
      didFinishAnimation()
    }
  }
  
  fileprivate func applyStyle() {
    backgroundColor = style.view.backgroundColor
  }
  
  fileprivate func addLayoutConstraints() {
    guard let superview = superview else { return }
    
    translatesAutoresizingMaskIntoConstraints = false
    
    // Fill the message view to covert entire area of its superview
    TegAutolayoutConstraints.fillParent(self, parentView: superview, margin: 0, vertically: true)
    TegAutolayoutConstraints.fillParent(self, parentView: superview, margin: 0, vertically: false)
  }
  
  fileprivate var titleLabel: UILabel? {
    return subviews.filter { $0 is UILabel }.map { $0 as! UILabel }.first
  }
  
  // MARK: - Title
  
  fileprivate func createTitle(_ title: String) {
    let label = UILabel()
    addSubview(label)
    label.text = title
    
    addTitleLayoutConstraints(label)
    applyTitleStyle(label)
  }
  
  fileprivate func addTitleLayoutConstraints(_ label: UILabel) {
    label.translatesAutoresizingMaskIntoConstraints = false
    
    // Make the width of the title label the same as the view, minus the margins.
    TegAutolayoutConstraints.fillParent(label, parentView: self,
      margin: style.title.horizontalMargin, vertically: false)
    
    // Center the label vertically in the view with an offset.
    TegAutolayoutConstraints.centerY(label, viewTwo: self, constraintContainer: self,
      constant: style.title.verticalOffset)
  }
  
  fileprivate func applyTitleStyle(_ label: UILabel) {
    label.textAlignment = .center
    label.font = style.title.font
    label.textColor = style.title.color
    label.numberOfLines = style.title.numberOfLines
    label.shadowColor = style.title.shadowColor
    label.shadowOffset = style.title.shadowOffset
  }
  
  // MARK: - Button
  
  fileprivate func createButton(_ title: String) {
    let button = UIButton()
    addSubview(button)
    button.setTitle(title, for: UIControlState())
    addButtonLayoutConstraints(button)
    applyButtonStyle(button)
    setupTapHandler(button)
  }
  
  fileprivate func addButtonLayoutConstraints(_ button: UIButton) {
    guard let titleLabel = titleLabel else { return }
    button.translatesAutoresizingMaskIntoConstraints = false
    
    // Make the width of the button the same as the view, minus the margins.
    TegAutolayoutConstraints.fillParent(button, parentView: self, margin: style.title.horizontalMargin, vertically: false)
    
    // Position the button under the title label
    TegAutolayoutConstraints.twoViewsNextToEachOther(titleLabel, viewTwo: button, constraintContainer: self, margin: 20, vertically: true)
  }
  
  fileprivate func applyButtonStyle(_ button: UIButton) {
    button.setTitleColor(style.button.color, for: UIControlState())
    button.setTitleColor(style.button.colorHighlighted, for: .highlighted)
    
    button.setTitleShadowColor(style.button.shadowColor, for: UIControlState())
    
    guard let label = button.titleLabel else { return }
    
    label.font = style.button.font
    label.numberOfLines = style.button.numberOfLines
    label.shadowOffset = style.button.shadowOffset
  }
  
  fileprivate func setupTapHandler(_ button: UIButton) {
    button.addTarget(self, action: #selector(GlyptodonView.didTapButton(_:)), for: .touchUpInside)
  }
  
  func didTapButton(_ button: UIButton) {
    didTapButtonHandler?()
  }
  
  // MARK: - Animation
  
  fileprivate func animateIn(_ didFinishAnimation: @escaping ()->()) {
    alpha = 0
    
    UIView.animate(withDuration: style.view.animationDurationSeconds,
      animations: { [weak self] in
        self?.alpha = 1
      },
      completion: { _ in
        didFinishAnimation()
      }
    )
  }
  
  fileprivate func animateOut(_ didFinishAnimation: @escaping ()->()) {
    UIView.animate(withDuration: style.view.animationDurationSeconds,
      animations: { [weak self] in
        self?.alpha = 0
      },
      completion: { _ in
        didFinishAnimation()
      }
    )
  }
}


// ----------------------------
//
// GlyptodonButtonDefaultStyles.swift
//
// ----------------------------


import UIKit

/**

Default styles for the button.
Default styles are used when individual element styles are not set.

*/
public struct GlyptodonButtonDefaultStyles {
  
  /// Revert the property values to their defaults
  public static func resetToDefaults() {
    color = _color
    colorHighlighted = _colorHighlighted
    font = _font
    horizontalMargin = _horizontalMargin
    numberOfLines = _numberOfLines
    shadowColor = _shadowColor
    shadowOffset = _shadowOffset
    verticalMargin = _verticalMargin
  }
  
  // ---------------------------
  

  fileprivate static let _color: UIColor = GlyptodonColor.fromHexString("#007AFF")
  
  /// Color of the button title.
  public static var color = _color
  
  
  // ---------------------------
  
  
  fileprivate static let _colorHighlighted: UIColor = GlyptodonColor.fromHexString("#007AFF33")
  
  /// Color of the button title when it's tapped.
  public static var colorHighlighted = _colorHighlighted
  
  
  // ---------------------------
  
  
  fileprivate static let _font = UIFont.preferredFont(forTextStyle: UIFontTextStyle.body)
  
  /// Font of the button title.
  public static var font = _font
  
  // ---------------------------
  
  
  fileprivate static let _horizontalMargin: CGFloat = 15
  
  /// Horizontal margin between the button and the edge of the view.
  public static var horizontalMargin = _horizontalMargin
  
  
  // ---------------------------
  
  
  fileprivate static let _numberOfLines: Int = 5
  
  /// The maximum number of lines in the button title.
  public static var numberOfLines = _numberOfLines
  
  
  // ---------------------------
  
  
  fileprivate static let _shadowColor: UIColor? = nil
  
  /// Color of text shadow.
  public static var shadowColor = _shadowColor
  
  
  // ---------------------------
  
  
  fileprivate static let _shadowOffset = CGSize(width: 0, height: 1)
  
  /// Text shadow offset.
  public static var shadowOffset = _shadowOffset
  
  
  // ---------------------------
  
  
  fileprivate static let _verticalMargin: CGFloat = 20
  
  /// Vertical margin between the title and the button.
  public static var verticalMargin = _verticalMargin
  
  
  // ---------------------------
}


// ----------------------------
//
// GlyptodonButtonStyle.swift
//
// ----------------------------

import UIKit

/// Defines styles related to the button.
open class GlyptodonButtonStyle {
  
  /// Clears the styles for all properties for this style object. Default styles will be used instead.
  open func clear() {
    _color = nil
    _colorHighlighted = nil
    _font = nil
    _horizontalMargin = nil
    _numberOfLines = nil
    _shadowColor = nil
    _shadowOffset = nil
    _verticalMargin = nil
  }
  
  // -----------------------------
  
  fileprivate var _color: UIColor?
  
  /// Color of the button title.
  open var color: UIColor {
    get {
      return _color ?? GlyptodonButtonDefaultStyles.color
    }
    
    set {
      _color = newValue
    }
  }
  
  // -----------------------------
  
  fileprivate var _colorHighlighted: UIColor?
  
  /// Color of the button title when it's tapped.
  open var colorHighlighted: UIColor {
    get {
      return _colorHighlighted ?? GlyptodonButtonDefaultStyles.colorHighlighted
    }
    
    set {
      _colorHighlighted = newValue
    }
  }
  
  // -----------------------------
  
  fileprivate var _font: UIFont?
  
  /// Font of the button title.
  open var font: UIFont {
    get {
      return _font ?? GlyptodonButtonDefaultStyles.font
    }
    
    set {
      _font = newValue
    }
  }
  
  // -----------------------------
  
  fileprivate var _horizontalMargin: CGFloat?
  
  /// Horizontal margin between the button and the edge of the view.
  open var horizontalMargin: CGFloat {
    get {
      return _horizontalMargin ?? GlyptodonButtonDefaultStyles.horizontalMargin
    }
    
    set {
      _horizontalMargin = newValue
    }
  }
  
  // -----------------------------
  
  fileprivate var _numberOfLines: Int?
  
  /// The maximum number of lines in the button title.
  open var numberOfLines: Int {
    get {
      return _numberOfLines ?? GlyptodonButtonDefaultStyles.numberOfLines
    }
    
    set {
      _numberOfLines = newValue
    }
  }
  
  // -----------------------------
  
  fileprivate var _shadowColor: UIColor?
  
  /// Color of text shadow.
  open var shadowColor: UIColor? {
    get {
      return _shadowColor ?? GlyptodonButtonDefaultStyles.shadowColor
    }
    
    set {
      _shadowColor = newValue
    }
  }
  
  // -----------------------------
  
  fileprivate var _shadowOffset: CGSize?
  
  /// Text shadow offset.
  open var shadowOffset: CGSize {
    get {
      return _shadowOffset ?? GlyptodonButtonDefaultStyles.shadowOffset
    }
    
    set {
      _shadowOffset = newValue
    }
  }
  
  // -----------------------------
  
  fileprivate var _verticalMargin: CGFloat?
  
  /// Vertical margin between the title and the button.
  open var verticalMargin: CGFloat {
    get {
      return _verticalMargin ?? GlyptodonButtonDefaultStyles.verticalMargin
    }
    
    set {
      _verticalMargin = newValue
    }
  }
  
  // -----------------------------
}


// ----------------------------
//
// GlyptodonStyle.swift
//
// ----------------------------

import UIKit

/// Combines various styles for the toolbar element.
open class GlyptodonStyle {
  /**
  
  Reverts all the default styles to their initial values. Usually used in setUp() function in the unit tests.
  
  */
  open static func resetDefaultStyles() {
    GlyptodonViewDefaultStyles.resetToDefaults()
    GlyptodonTitleDefaultStyles.resetToDefaults()
  }
  
  
  /// Clears the styles for all properties for this style object. The styles will be taken from parent and default properties.
  open func clear() {
    view.clear()
  }
  
  /**

  Styles for the  view.

  */
  open lazy var view = GlyptodonViewStyle()
  
  /**
  
  Styles for the title text.
  
  */
  open lazy var title = GlyptodonTitleStyle()
  
  /**
  
  Styles for the button.
  
  */
  open lazy var button = GlyptodonButtonStyle()
}


// ----------------------------
//
// GlyptodonTitleDefaultStyles.swift
//
// ----------------------------

import UIKit

/**

Default styles for the title label.
Default styles are used when individual element styles are not set.

*/
public struct GlyptodonTitleDefaultStyles {
  
  /// Revert the property values to their defaults
  public static func resetToDefaults() {
    color = _color
    font = _font
    horizontalMargin = _horizontalMargin
    verticalOffset = _verticalOffset
    numberOfLines = _numberOfLines
    shadowColor = _shadowColor
    shadowOffset = _shadowOffset
  }
  
  // ---------------------------
  
  
  fileprivate static let _color = GlyptodonColor.fromHexString("#666666")
  
  /// Color of the title text.
  public static var color = _color
  
  
  // ---------------------------
  
  fileprivate static let defaultNonDynamicFontSize: CGFloat = 28
  
  fileprivate static let _font: UIFont = {
    if #available(iOS 8.2, *) {
      if #available(iOS 9.0, *) {
        // Use dynamic type font for accessibility when available
        return UIFont.preferredFont(forTextStyle: UIFontTextStyle.title1)
      } else {
        return UIFont.systemFont(ofSize: defaultNonDynamicFontSize, weight: UIFontWeightLight)
      }
    } else {
      return UIFont.systemFont(ofSize: defaultNonDynamicFontSize)
    }
  }()
  
  /// Font of the title text.
  public static var font = _font
  
  // ---------------------------
  
  
  fileprivate static let _horizontalMargin: CGFloat = 15
  
  /// Horizontal margin between the title and the edge of the view.
  public static var horizontalMargin = _horizontalMargin
  
  
  // ---------------------------
  
  
  fileprivate static let _numberOfLines: Int = 5
  
  /// The maximum number of lines in the title.
  public static var numberOfLines = _numberOfLines
  
  
  // ---------------------------
  
  
  fileprivate static let _shadowColor: UIColor? = nil
  
  /// Color of text shadow.
  public static var shadowColor = _shadowColor
  

  // ---------------------------

  
  fileprivate static let _shadowOffset = CGSize(width: 0, height: 1)
  
  /// Text shadow offset.
  public static var shadowOffset = _shadowOffset
  
  
  // ---------------------------
  
  
  fileprivate static let _verticalOffset: CGFloat = 0
  
  /// Vertical offset of the title relative to the center of the view. If zero the label is aligned exactly at the center.
  public static var verticalOffset = _verticalOffset
  
  
  // ---------------------------
}


// ----------------------------
//
// GlyptodonTitleStyle.swift
//
// ----------------------------

import UIKit

/// Defines styles related to the title label.
open class GlyptodonTitleStyle {
  
  /// Clears the styles for all properties for this style object. Default styles will be used instead.
  open func clear() {
    _color = nil
    _font = nil
    _horizontalMargin = nil
    _numberOfLines = nil
    _shadowColor = nil
    _shadowOffset = nil
    _verticalOffset = nil
  }

  // -----------------------------
  
  fileprivate var _color: UIColor?
  
  /// Color of the title text.
  open var color: UIColor {
    get {
      return _color ??  GlyptodonTitleDefaultStyles.color
    }
    
    set {
      _color = newValue
    }
  }
  
  // -----------------------------
  
  fileprivate var _font: UIFont?
  
  /// Color of the title text.
  open var font: UIFont {
    get {
      return _font ?? GlyptodonTitleDefaultStyles.font
    }
    
    set {
      _font = newValue
    }
  }
  
  // -----------------------------
  
  fileprivate var _horizontalMargin: CGFloat?
  
  /// Horizontal margin between the title and the edge of the view.
  open var horizontalMargin: CGFloat {
    get {
      return _horizontalMargin ?? GlyptodonTitleDefaultStyles.horizontalMargin
    }
    
    set {
      _horizontalMargin = newValue
    }
  }
  
  // -----------------------------
  
  fileprivate var _numberOfLines: Int?
  
  /// The maximum number of lines in the title.
  open var numberOfLines: Int {
    get {
      return _numberOfLines ?? GlyptodonTitleDefaultStyles.numberOfLines
    }
    
    set {
      _numberOfLines = newValue
    }
  }
  
  // -----------------------------
  
  fileprivate var _shadowColor: UIColor?
  
  /// Color of text shadow.
  open var shadowColor: UIColor? {
    get {
      return _shadowColor ?? GlyptodonTitleDefaultStyles.shadowColor
    }
    
    set {
      _shadowColor = newValue
    }
  }
  
  // -----------------------------
  
  fileprivate var _shadowOffset: CGSize?
  
  /// Text shadow offset.
  open var shadowOffset: CGSize {
    get {
      return _shadowOffset ?? GlyptodonTitleDefaultStyles.shadowOffset
    }
    
    set {
      _shadowOffset = newValue
    }
  }
  
  // -----------------------------
  
  fileprivate var _verticalOffset: CGFloat?
  
  /// Vertical offset of the title relative to the center of the view. If zero the label is aligned exactly at the center.
  open var verticalOffset: CGFloat {
    get {
      return _verticalOffset ?? GlyptodonTitleDefaultStyles.verticalOffset
    }
    
    set {
      _verticalOffset = newValue
    }
  }
  
  // -----------------------------
}


// ----------------------------
//
// GlyptodonViewDefaultStyles.swift
//
// ----------------------------

import UIKit

/**

Default styles for the view.
Default styles are used when individual element styles are not set.

*/
public struct GlyptodonViewDefaultStyles {
  
  /// Revert the property values to their defaults
  public static func resetToDefaults() {
    animationDurationSeconds = _animationDurationSeconds
    backgroundColor = _backgroundColor
  }
  
  // ---------------------------
  
  fileprivate static let _animationDurationSeconds: TimeInterval = 0.3
  
  /// Duration of the fade animation that is used to show and hide the message view. Setting it to 0 will result in no animation.
  public static var animationDurationSeconds = _animationDurationSeconds
  
  // ---------------------------
  
  fileprivate static let _backgroundColor: UIColor? = GlyptodonColor.fromHexString("#EEEEEE")
  
  /// Background color of the message view.
  public static var backgroundColor = _backgroundColor
  
  // ---------------------------

}


// ----------------------------
//
// GlyptodonViewStyle.swift
//
// ----------------------------

import UIKit

/// Defines styles related to the view in general.
open class GlyptodonViewStyle {
  
  /// Clears the styles for all properties for this style object. Default styles will be used instead.
  open func clear() {
    _backgroundColor = nil
  }
  
  // ---------------------------
  
  
  fileprivate var _animationDurationSeconds: TimeInterval?
  
  /// Duration of the fade animation that is used to show and hide the message view. Setting it to 0 will result in no animation.
  open var animationDurationSeconds: TimeInterval {
    get {
      return _animationDurationSeconds ?? GlyptodonViewDefaultStyles.animationDurationSeconds
    }
    
    set {
      _animationDurationSeconds = newValue
    }
  }
  
  // -----------------------------
  
  fileprivate var _backgroundColor: UIColor?
  
  /// Background color of the message view.
  open var backgroundColor: UIColor? {
    get {
      return _backgroundColor ?? GlyptodonViewDefaultStyles.backgroundColor
    }
    
    set {
      _backgroundColor = newValue
    }
  }
  
  // ---------------------------
}


// ----------------------------
//
// UIView+Glyptodon.swift
//
// ----------------------------

import UIKit

private var sabAssociationKey: UInt8 = 0

/**

UIView extension for showing a 'no content' message.

let view = UIView()
view.glyptodon.show("Shopping cart is empty")

*/
public extension UIView {
  /**
  
  Message bar extension.
  Call `glyptodon.show`, `glyptodon.hide` functions to show a message widget in the view.
  
  let view = UIView()
  view.glyptodon.show("Shopping cart is empty")
  
  */
  public var glyptodon: Glyptodon {
    get {
      if let value = objc_getAssociatedObject(self, &sabAssociationKey) as? Glyptodon {
        return value
      } else {
        let glyptodon = Glyptodon(superview: self)
        
        objc_setAssociatedObject(self, &sabAssociationKey, glyptodon,
          objc_AssociationPolicy.OBJC_ASSOCIATION_RETAIN)
        
        return glyptodon
      }
    }
    
    set {
      objc_setAssociatedObject(self, &sabAssociationKey, newValue,
        objc_AssociationPolicy.OBJC_ASSOCIATION_RETAIN)
    }
  }
}


// ----------------------------
//
// GlyptodonColor.swift
//
// ----------------------------

import UIKit

/**

Creates a UIColor object from a string.

Examples:

    GlyptodonColor.fromHexString('#340f9a')

    // With alpha channel
    GlyptodonColor.fromHexString('#f1a2b3a6')

Source: https://github.com/marketplacer/Glyptodon

*/
open class GlyptodonColor {
  /**
  
  Creates a UIColor object from a string.
  
  - parameter rgba: a RGB/RGBA string representation of color. It can include optional alpha value. Example: "#cca213" or "#cca21312" (with alpha value).
  
  - returns: UIColor object.
  
  */
  open class func fromHexString(_ rgba: String) -> UIColor {
    var red: CGFloat   = 0.0
    var green: CGFloat = 0.0
    var blue: CGFloat  = 0.0
    var alpha: CGFloat = 1.0
    
    if !rgba.hasPrefix("#") {
      print("Warning: GlyptodonColor.fromHexString, # character missing")
      return UIColor()
    }
    
    let index = rgba.characters.index(rgba.startIndex, offsetBy: 1)
    let hex = rgba.substring(from: index)
    let scanner = Scanner(string: hex)
    var hexValue: CUnsignedLongLong = 0
    
    if !scanner.scanHexInt64(&hexValue) {
      print("Warning: GlyptodonColor.fromHexString, error scanning hex value")
      return UIColor()
    }

    if hex.characters.count == 6 {
      red   = CGFloat((hexValue & 0xFF0000) >> 16) / 255.0
      green = CGFloat((hexValue & 0x00FF00) >> 8)  / 255.0
      blue  = CGFloat(hexValue & 0x0000FF) / 255.0
    } else if hex.characters.count == 8 {
      red   = CGFloat((hexValue & 0xFF000000) >> 24) / 255.0
      green = CGFloat((hexValue & 0x00FF0000) >> 16) / 255.0
      blue  = CGFloat((hexValue & 0x0000FF00) >> 8)  / 255.0
      alpha = CGFloat(hexValue & 0x000000FF)         / 255.0
    } else {
      print("Warning: GlyptodonColor.fromHexString, invalid rgb string, length should be 7 or 9")
      return UIColor()
    }
   
    return UIColor(red: red, green: green, blue: blue, alpha: alpha)
  }
}


// ----------------------------
//
// TegAutolayoutConstraints.swift
//
// ----------------------------

//
//  TegAlign.swift
//
//  Collection of shortcuts to create autolayout constraints.
//

import UIKit

class TegAutolayoutConstraints {
  class func centerX(_ viewOne: UIView, viewTwo: UIView,
    constraintContainer: UIView, constant: CGFloat = 0) -> [NSLayoutConstraint] {
      
    return center(viewOne, viewTwo: viewTwo, constraintContainer: constraintContainer,
      vertically: false, constant: constant)
  }
  
  @discardableResult
  class func centerY(_ viewOne: UIView, viewTwo: UIView,
    constraintContainer: UIView, constant: CGFloat = 0) -> [NSLayoutConstraint] {
      
    return center(viewOne, viewTwo: viewTwo, constraintContainer: constraintContainer,
      vertically: true, constant: constant)
  }
  
  fileprivate class func center(_ viewOne: UIView, viewTwo: UIView,
    constraintContainer: UIView, vertically: Bool = false, constant: CGFloat = 0) -> [NSLayoutConstraint] {
      
    let attribute = vertically ? NSLayoutAttribute.centerY : NSLayoutAttribute.centerX
    
    let constraint = NSLayoutConstraint(
      item: viewOne,
      attribute: attribute,
      relatedBy: NSLayoutRelation.equal,
      toItem: viewTwo,
      attribute: attribute,
      multiplier: 1,
      constant: constant)
    
    constraintContainer.addConstraint(constraint)
    
    return [constraint]
  }
  
  class func fillParent(_ view: UIView, parentView: UIView, margin: CGFloat = 0, vertically: Bool) {
    var marginFormat = ""
    
    if margin != 0 {
      marginFormat = "-\(margin)-"
    }
    
    var format = "|\(marginFormat)[view]\(marginFormat)|"
    
    if vertically {
      format = "V:" + format
    }
    
    let constraints = NSLayoutConstraint.constraints(withVisualFormat: format,
      options: [], metrics: nil,
      views: ["view": view])
    
    parentView.addConstraints(constraints)
  }
  
  @discardableResult
  class func twoViewsNextToEachOther(_ viewOne: UIView, viewTwo: UIView,
    constraintContainer: UIView, margin: CGFloat = 0,
    vertically: Bool = false) -> [NSLayoutConstraint] {
      
      var marginFormat = ""
      
      if margin != 0 {
        marginFormat = "-\(margin)-"
      }
      
      var format = "[viewOne]\(marginFormat)[viewTwo]"
      
      if vertically {
        format = "V:" + format
      }
      
      let constraints = NSLayoutConstraint.constraints(withVisualFormat: format,
        options: [], metrics: nil,
        views: [ "viewOne": viewOne, "viewTwo": viewTwo ])
      
      constraintContainer.addConstraints(constraints)
      
      return constraints
  }
}


